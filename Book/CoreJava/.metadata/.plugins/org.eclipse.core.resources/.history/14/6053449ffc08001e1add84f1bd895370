package com.corejava.streams;

import java.util.HashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class CollectingIntoMaps {

	public static Stream<Person> people() {
		return Stream.of(new Person(1001, "Peter"), new Person(1002, "Paul"), new Person(1003, "Mary"));
	}

	public static void main(String[] args) {

		Map<Integer, String> idToName = people().collect(Collectors.toMap(Person::getId, Person::getName));
		System.out.println("idToName: " + idToName);

		Map<Integer, Person> idToPerson = people().collect(Collectors.toMap(Person::getId, Function.identity()));
		System.out.println("idToPerson: " + idToPerson);

		idToPerson = people()
				.collect(Collectors.toMap(Person::getId, Function.identity(), (existingValue, newValue) -> {
					throw new IllegalStateException();
				}, TreeMap::new));
		System.out.println("idToPerson: " + idToPerson.getClass().getName() + idToPerson);
		
		Stream<Locale> locales = Stream.of(Locale.getAvailableLocales());
		Map<String, String> languageNames = locales.collect(
				Collectors.toMap(
						Locale::getDisplayLanguage,
						Locale::getDisplayCountry,
						(existingValue, newValue) -> existingValue));
		System.out.println("languageNames: " + languageNames);
		
		locales = Stream.of(Locale.getAvailableLocales());
		Map<String, Set<String>> countryLanguageSet = locales.collect(
				Collectors.toMap(
						Locale::getDisplayCountry,
						l -> Set.of(l.getDisplayLanguage()),
						(a, b) -> {
							Set<String> union = new HashSet<String>(a);
							union.addAll(b);
							return union;
						}));
		System.out.println("countryLanguageSet: " + countryLanguageSet);
		System.out.println(countryLanguageSet.get("India"));
		System.out.println(countryLanguageSet.get("France"));
		System.out.println(countryLanguageSet.get("Germany"));
	}
}
